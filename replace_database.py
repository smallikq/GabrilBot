#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞
–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ë–î –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ all_users.xlsx
"""

import os
import sys
import pandas as pd
import shutil
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows –∫–æ–Ω—Å–æ–ª–∏
if sys.platform == 'win32':
    import codecs
    try:
        sys.stdout.reconfigure(encoding='utf-8')
        sys.stderr.reconfigure(encoding='utf-8')
    except:
        sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
        sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from bot.utils.database import DatabaseManager


def replace_database_from_excel(excel_file: str):
    """
    –ó–∞–º–µ–Ω—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Excel —Ñ–∞–π–ª–∞

    Args:
        excel_file: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É —Å –Ω–æ–≤–æ–π –±–∞–∑–æ–π
    """

    print("=" * 60)
    print("–ó–∞–º–µ–Ω–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞")
    print("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
    if not os.path.exists(excel_file):
        print(f"‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª {excel_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    print(f"\nüìÇ –§–∞–π–ª –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {excel_file}")

    try:
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        print("\nüìä –ß–∏—Ç–∞—é Excel —Ñ–∞–π–ª...")
        df = pd.read_excel(excel_file)
        print(f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüìã –ö–æ–ª–æ–Ω–∫–∏ –≤ —Ñ–∞–π–ª–µ:")
        for col in df.columns:
            print(f"   ‚Ä¢ {col}")

        # –°–æ–∑–¥–∞—ë–º –±—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã
        db_path = DatabaseManager.DB_PATH
        if os.path.exists(db_path):
            backup_time = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_path = f'bot/data/backups/all_users_before_replace_{backup_time}.db'
            os.makedirs('bot/data/backups', exist_ok=True)

            print(f"\nüíæ –°–æ–∑–¥–∞—é –±—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã...")
            shutil.copy2(db_path, backup_path)
            print(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_path}")

            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é –±–∞–∑—É
            print(f"\nüóëÔ∏è –£–¥–∞–ª—è—é —Å—Ç–∞—Ä—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            os.remove(db_path)
            print(f"‚úÖ –°—Ç–∞—Ä–∞—è –±–∞–∑–∞ —É–¥–∞–ª–µ–Ω–∞")
        else:
            print(f"\n‚ö†Ô∏è –¢–µ–∫—É—â–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—é –Ω–æ–≤—É—é")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é –±–∞–∑—É
        print(f"\nüîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        DatabaseManager.init_database()
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        print(f"\nüìù –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏...")
        users_data = []

        # –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ Excel –≤ —Ñ–æ—Ä–º–∞—Ç –ë–î
        column_mapping = {
            'User_id': 'user_id',
            'Username': 'username',
            '–ò–º—è': 'first_name',
            '–§–∞–º–∏–ª–∏—è': 'last_name',
            '–¢–µ–ª–µ—Ñ–æ–Ω': 'phone',
            '–ü–æ–ª': 'gender',
            '–ü—Ä–µ–º–∏—É–º': 'is_premium',
            'Verified': 'is_verified',
            '–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (UTC)': 'last_activity_utc',
            '–í—Ä–µ–º—è —Å–±–æ—Ä–∞ (UTC+1)': 'collected_at',
            '–ò—Å—Ç–æ—á–Ω–∏–∫ –≥—Ä—É–ø–ø—ã': 'source_group',
            'ID –≥—Ä—É–ø–ø—ã': 'group_id',
            '–¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞': 'account_type'
        }

        skipped_count = 0
        for idx, row in df.iterrows():
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º User_id
                user_id_raw = row.get('User_id', 0)

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º User_id
                if pd.isna(user_id_raw) or user_id_raw == '' or user_id_raw == 0:
                    skipped_count += 1
                    continue

                # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ int
                try:
                    user_id = int(user_id_raw)
                except (ValueError, TypeError):
                    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
                    user_id_str = str(user_id_raw).strip()
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –≤ –Ω–∞—á–∞–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∏)
                    if not user_id_str or not user_id_str[0].isdigit():
                        skipped_count += 1
                        continue
                    user_id = int(''.join(filter(str.isdigit, user_id_str)))

                if user_id <= 0:
                    skipped_count += 1
                    continue

                user_tuple = (
                    user_id,  # user_id
                    row.get('Username', None),  # username
                    row.get('–ò–º—è', None),  # first_name
                    row.get('–§–∞–º–∏–ª–∏—è', None),  # last_name
                    row.get('–¢–µ–ª–µ—Ñ–æ–Ω', None),  # phone
                    row.get('–ü–æ–ª', None),  # gender
                    1 if row.get('–ü—Ä–µ–º–∏—É–º') else 0,  # is_premium
                    1 if row.get('Verified') else 0,  # is_verified
                    row.get('–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (UTC)', None),  # last_activity_utc
                    row.get('–í—Ä–µ–º—è —Å–±–æ—Ä–∞ (UTC+1)', None),  # collected_at
                    row.get('–ò—Å—Ç–æ—á–Ω–∏–∫ –≥—Ä—É–ø–ø—ã', None),  # source_group
                    str(row.get('ID –≥—Ä—É–ø–ø—ã', '')) if pd.notna(row.get('ID –≥—Ä—É–ø–ø—ã')) else None,  # group_id
                    row.get('–¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞', 'Regular')  # account_type
                )
                users_data.append(user_tuple)
            except Exception as e:
                skipped_count += 1
                if skipped_count <= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                    print(f"   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {idx}: {e}")
                continue

        print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(users_data)} –∑–∞–ø–∏—Å–µ–π")
        if skipped_count > 0:
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ {skipped_count} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")

        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
        print(f"\nüíø –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É (–±–∞—Ç—á–∞–º–∏ –ø–æ 1000)...")
        inserted_count = DatabaseManager.insert_users(users_data, batch_size=1000)
        print(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ {inserted_count} –∑–∞–ø–∏—Å–µ–π")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\nüìä –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        stats = DatabaseManager.get_database_stats()

        print(f"\n{'=' * 60}")
        print(f"‚úÖ –ë–ê–ó–ê –î–ê–ù–ù–´–• –£–°–ü–ï–®–ù–û –ó–ê–ú–ï–ù–ï–ù–ê")
        print(f"{'=' * 60}")
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–≤–æ–π –±–∞–∑—ã:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0):,}")
        print(f"   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('unique_users', 0):,}")
        print(f"   ‚Ä¢ –° username: {stats.get('with_username', 0):,}")
        print(f"   ‚Ä¢ Premium: {stats.get('premium_users', 0):,}")
        print(f"   ‚Ä¢ Verified: {stats.get('verified_users', 0):,}")

        if stats.get('top_sources'):
            print(f"\n   üìå –¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:")
            for source, count in list(stats['top_sources'].items())[:5]:
                print(f"      ‚Ä¢ {source}: {count:,}")

        print(f"\n{'=' * 60}\n")

        return True

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    excel_file = "all_users.xlsx"

    if len(sys.argv) > 1:
        excel_file = sys.argv[1]

    print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
    print(f"   –¢–µ–∫—É—â–∞—è –±–∞–∑–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é.")

    response = input(f"\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ").strip().lower()

    if response in ['yes', 'y', '–¥–∞']:
        success = replace_database_from_excel(excel_file)
        if success:
            print("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            sys.exit(0)
        else:
            print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏!")
            sys.exit(1)
    else:
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
