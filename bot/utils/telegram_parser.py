import os
import asyncio
import logging
from datetime import datetime, timezone, timedelta
from typing import Tuple, Optional, List, Dict, Any, Set
import pandas as pd
from tqdm import tqdm
from telethon import TelegramClient
from telethon.errors import FloodWaitError, SessionPasswordNeededError


# Enhanced Excel schema
COLUMNS = [
    "User_id",
    "Username",
    "–ò–º—è",
    "–§–∞–º–∏–ª–∏—è",
    "–¢–µ–ª–µ—Ñ–æ–Ω",
    "–ü–æ–ª",
    "–ü—Ä–µ–º–∏—É–º",
    "Verified",
    "–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (UTC)",
    "–í—Ä–µ–º—è —Å–±–æ—Ä–∞ (UTC+1)",
    "–ò—Å—Ç–æ—á–Ω–∏–∫ –≥—Ä—É–ø–ø—ã",
    "ID –≥—Ä—É–ø–ø—ã",
    "–¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞"
]


def log_banner(text, symbol="="):
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫—Ä–∞—Å–∏–≤—ã–º –±–∞–Ω–Ω–µ—Ä–æ–º"""
    border = symbol * (len(text) + 4)
    logging.info(f"\n{border}")
    logging.info(f"{symbol} {text} {symbol}")
    logging.info(f"{border}\n")


def create_user_row(user, group_info=None, account_type="Unknown"):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    collected_time = (datetime.now(timezone.utc) + timedelta(hours=1)).strftime("%Y-%m-%d %H:%M:%S")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ username - –¥–æ–±–∞–≤–ª—è–µ–º @ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    username = getattr(user, 'username', None)
    if username and not username.startswith('@'):
        username = f'@{username}'

    return [
        getattr(user, 'id', user) if hasattr(user, 'id') else user,  # User_id
        username,  # Username —Å @
        getattr(user, 'first_name', None),  # –ò–º—è
        getattr(user, 'last_name', None),  # –§–∞–º–∏–ª–∏—è
        getattr(user, 'phone', None),  # –¢–µ–ª–µ—Ñ–æ–Ω
        None,  # –ü–æ–ª (–ø–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º)
        getattr(user, 'premium', None),  # –ü—Ä–µ–º–∏—É–º
        getattr(user, 'verified', None),  # Verified
        None,  # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–∑–∞–ø–æ–ª–Ω–∏–º –ø–æ–∑–∂–µ)
        collected_time,  # –í—Ä–µ–º—è —Å–±–æ—Ä–∞
        group_info.get('title', 'Unknown') if group_info else None,  # –ò—Å—Ç–æ—á–Ω–∏–∫ –≥—Ä—É–ø–ø—ã
        group_info.get('id', None) if group_info else None,  # ID –≥—Ä—É–ø–ø—ã
        account_type  # –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
    ]


async def find_date_boundaries(client, chat_id: int, target_date: datetime.date) -> Tuple[Optional[int], Optional[int]]:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≥—Ä–∞–Ω–∏—Ü —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        start_datetime = datetime.combine(target_date, datetime.min.time()).replace(tzinfo=timezone.utc)
        end_datetime = datetime.combine(target_date, datetime.max.time()).replace(tzinfo=timezone.utc)

        logging.info(f"Searching messages for {target_date} between {start_datetime} and {end_datetime}")

        # –ü–æ–∏—Å–∫ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
        last_msg = None
        async for msg in client.iter_messages(chat_id, offset_date=end_datetime + timedelta(seconds=1), limit=50):
            if msg.date.date() == target_date:
                last_msg = msg
                break

        if not last_msg:
            return None, None

        first_msg = None
        async for msg in client.iter_messages(chat_id, offset_date=start_datetime, reverse=True, limit=50):
            if msg.date.date() == target_date:
                first_msg = msg
                break

        if first_msg and last_msg:
            logging.info(f"Found boundaries: {first_msg.id} - {last_msg.id}")
            return first_msg.id, last_msg.id

        return None, None

    except FloodWaitError as e:
        logging.warning(f"FloodWaitError: waiting {e.seconds} seconds")
        await asyncio.sleep(e.seconds)
        return await find_date_boundaries(client, chat_id, target_date)
    except Exception as e:
        logging.error(f"Error finding boundaries for {chat_id}: {e}")
        return None, None


async def process_dialog_enhanced(client, dialog, pbar, date_target, account_info):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞"""
    users = set()
    try:
        if not dialog.is_group:
            pbar.update(1)
            return users

        group_info = {
            'title': dialog.title,
            'id': dialog.id,
            'participants_count': getattr(dialog.entity, 'participants_count', 0)
        }

        logging.info(f"Processing group: {dialog.title} (ID: {dialog.id}, Members: {group_info['participants_count']})")

        min_id, max_id = await find_date_boundaries(client, dialog.id, date_target)

        if not min_id or not max_id:
            logging.info(f"No messages in {dialog.title} for {date_target}")
            pbar.update(1)
            return users

        message_count = 0
        unique_senders = set()

        async for message in client.iter_messages(dialog.id, min_id=min_id - 1, max_id=max_id + 1):
            if message.date.date() == date_target and message.sender:
                try:
                    sender_id = message.sender_id
                    if sender_id not in unique_senders:
                        unique_senders.add(sender_id)

                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                        user_entity = message.sender
                        last_seen = message.date.strftime("%Y-%m-%d %H:%M:%S")

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ username —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º @
                        username = getattr(user_entity, 'username', None)
                        if username and not username.startswith('@'):
                            username = f'@{username}'

                        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        enhanced_user_data = [
                            sender_id,
                            username,  # Username —Å @
                            getattr(user_entity, 'first_name', None),
                            getattr(user_entity, 'last_name', None),
                            getattr(user_entity, 'phone', None),
                            None,  # –ü–æ–ª
                            getattr(user_entity, 'premium', None),
                            getattr(user_entity, 'verified', None),
                            last_seen,
                            (datetime.now(timezone.utc) + timedelta(hours=1)).strftime("%Y-%m-%d %H:%M:%S"),
                            dialog.title,
                            dialog.id,
                            account_info['phone_number']
                        ]

                        users.add(tuple(enhanced_user_data))

                    message_count += 1

                except Exception as e:
                    logging.error(f"Error processing message {message.id}: {e}")
                    continue

        logging.info(f"Group {dialog.title}: {len(users)} unique users from {message_count} messages")
        pbar.update(1)

    except Exception as e:
        logging.error(f"Error processing {getattr(dialog, 'title', 'Unknown')}: {e}")
        pbar.update(1)

    return users


async def get_users_from_chats_enhanced(account, date_target, progress_callback=None):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    result_message = []
    file_path = None

    if not account.get('api_id') or not account.get('api_hash'):
        error_msg = f"‚ö†Ô∏è Account {account['phone_number']}: Missing API credentials"
        result_message.append(error_msg)
        logging.error(error_msg)
        return result_message, file_path

    log_banner(f"Processing Account {account['phone_number']}")
    result_message.append(f"üîÑ Processing account {account['phone_number']}...")

    session_name = f'session_{account["phone_number"]}'
    client = TelegramClient(session_name, account['api_id'], account['api_hash'])

    try:
        await client.start(phone=account['phone_number'])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if not await client.is_user_authorized():
            result_message.append(f"‚ùå Account {account['phone_number']} not authorized")
            return result_message, file_path

        me = await client.get_me()
        logging.info(f"Successfully connected as {me.first_name} ({me.username or 'No username'})")

        dialogs = await client.get_dialogs()

        # –§–∏–ª—å—Ç—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        filtered_dialogs = []
        for dialog in dialogs:
            if dialog.is_group and not dialog.archived:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                if hasattr(dialog.entity, 'participants_count'):
                    if dialog.entity.participants_count > 10:  # –¢–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã —Å >10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                        filtered_dialogs.append(dialog)
                else:
                    filtered_dialogs.append(dialog)

        result_message.append(f"üìå Found {len(filtered_dialogs)} active groups (filtered from {len(dialogs)} total)")

        if not filtered_dialogs:
            result_message.append(f"‚ö†Ô∏è No suitable groups found")
            return result_message, file_path

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
        with tqdm(total=len(filtered_dialogs), desc=f"Processing {account['phone_number']}", unit="group") as pbar:
            semaphore = asyncio.Semaphore(3)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á

            async def bounded_process(dialog):
                async with semaphore:
                    return await process_dialog_enhanced(client, dialog, pbar, date_target, account)

            tasks = [bounded_process(dialog) for dialog in filtered_dialogs]
            results = await asyncio.gather(*tasks, return_exceptions=True)

        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        all_users = set()
        for result in results:
            if isinstance(result, Exception):
                logging.error(f"Dialog processing error: {result}")
                continue
            all_users.update(result)

        logging.info(f"Total unique users collected: {len(all_users)}")

        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (SQL)
        if all_users:
            from .database import DatabaseManager
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
            await DatabaseManager.backup_database()

            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ SQL –±–∞–∑—ã
                existing_ids = DatabaseManager.get_existing_user_ids()
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                new_users = []
                for row in all_users:
                    if row[0] not in existing_ids:
                        new_users.append(row)
                
                if new_users:
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ SQL –±–∞–∑—É
                    inserted_count = DatabaseManager.insert_users(new_users)
                    result_message.append(f"‚úÖ Database updated: +{inserted_count} new users")
                    logging.info(f"Database updated with {inserted_count} new users")
                    
                    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (Excel –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                    date_str = date_target.strftime('%Y-%m-%d')
                    file_path = f'bot/data/reply/reply_{account["phone_number"]}_{date_str}.xlsx'
                    
                    try:
                        df_new = pd.DataFrame(list(new_users), columns=COLUMNS)
                        df_new.to_excel(file_path, index=False)
                        result_message.append(f"üíæ Reply file created: {len(new_users)} users")
                        logging.info(f"Reply file saved: {file_path}")
                    except Exception as e:
                        logging.error(f"Error saving reply file: {e}")
                        result_message.append(f"‚ö†Ô∏è Reply file error: {e}")
                        file_path = None
                else:
                    result_message.append(f"üìå No new users found for {account['phone_number']}")
                    
            except Exception as e:
                logging.error(f"Error saving to database: {e}")
                result_message.append(f"‚ö†Ô∏è Database save error: {e}")
        else:
            result_message.append(f"üìå No users collected from {account['phone_number']}")

    except SessionPasswordNeededError:
        result_message.append(f"‚ùå Account {account['phone_number']}: 2FA password required")
    except Exception as e:
        logging.error(f"Error processing account {account['phone_number']}: {e}")
        result_message.append(f"‚ùå Account {account['phone_number']}: {str(e)}")

    finally:
        try:
            await client.disconnect()
        except:
            pass

    return result_message, file_path

