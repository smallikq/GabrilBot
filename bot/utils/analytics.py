import logging
import pandas as pd
from typing import Dict, Any


class Analytics:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""

    @staticmethod
    def get_enhanced_analytics(df: pd.DataFrame) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        try:
            analytics_data = {
                "total_users": len(df),
                "with_username": df["Username"].notna().sum(),
                "without_username": df["Username"].isna().sum(),
                "premium_users": df["–ü—Ä–µ–º–∏—É–º"].sum() if "–ü—Ä–µ–º–∏—É–º" in df.columns else 0,
                "verified_users": df["Verified"].sum() if "Verified" in df.columns else 0,
            }

            # –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            if "–í—Ä–µ–º—è —Å–±–æ—Ä–∞ (UTC+1)" in df.columns:
                df["–í—Ä–µ–º—è —Å–±–æ—Ä–∞ (UTC+1)"] = pd.to_datetime(df["–í—Ä–µ–º—è —Å–±–æ—Ä–∞ (UTC+1)"], errors="coerce")
                df_time = df.dropna(subset=["–í—Ä–µ–º—è —Å–±–æ—Ä–∞ (UTC+1)"])

                if not df_time.empty:
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
                    df_time['day_of_week'] = df_time["–í—Ä–µ–º—è —Å–±–æ—Ä–∞ (UTC+1)"].dt.day_name()
                    day_stats = df_time['day_of_week'].value_counts()
                    analytics_data["day_of_week_stats"] = day_stats.head(3).to_dict()

                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Å–∞–º
                    df_time['hour'] = df_time["–í—Ä–µ–º—è —Å–±–æ—Ä–∞ (UTC+1)"].dt.hour
                    hour_stats = df_time['hour'].value_counts().sort_index()
                    peak_hour = hour_stats.idxmax()
                    analytics_data["peak_hour"] = peak_hour
                    analytics_data["peak_hour_count"] = hour_stats[peak_hour]

                    # –ü—Ä–æ–≥–Ω–æ–∑ —Ä–æ—Å—Ç–∞
                    daily_growth = df_time.groupby(df_time["–í—Ä–µ–º—è —Å–±–æ—Ä–∞ (UTC+1)"].dt.date).size()
                    if len(daily_growth) > 1:
                        avg_daily = daily_growth.mean()
                        analytics_data["avg_daily_growth"] = avg_daily
                        analytics_data["weekly_forecast"] = avg_daily * 7

            # –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            if "–ò—Å—Ç–æ—á–Ω–∏–∫ –≥—Ä—É–ø–ø—ã" in df.columns:
                source_stats = df["–ò—Å—Ç–æ—á–Ω–∏–∫ –≥—Ä—É–ø–ø—ã"].value_counts()
                analytics_data["total_groups"] = len(source_stats)
                analytics_data["top_group"] = source_stats.index[0]
                analytics_data["top_group_count"] = source_stats.iloc[0]

            return analytics_data

        except Exception as e:
            logging.error(f"Error in analytics: {e}")
            return {"error": str(e)}

    @staticmethod
    def format_analytics_text(analytics_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        if "error" in analytics_data:
            return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {analytics_data['error']}"

        text = "üìà <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</b>\n\n"

        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        text += f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {analytics_data['total_users']:,}\n"
        text += f"üè∑ <b>–° username:</b> {analytics_data['with_username']:,} ({analytics_data['with_username'] / analytics_data['total_users'] * 100:.1f}%)\n"
        text += f"üè∑ <b>–ë–µ–∑ username:</b> {analytics_data['without_username']:,} ({analytics_data['without_username'] / analytics_data['total_users'] * 100:.1f}%)\n"

        if analytics_data.get('premium_users', 0) > 0:
            text += f"üíé <b>Premium:</b> {analytics_data['premium_users']:,}\n"

        if analytics_data.get('verified_users', 0) > 0:
            text += f"‚úÖ <b>Verified:</b> {analytics_data['verified_users']:,}\n"

        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        if "day_of_week_stats" in analytics_data:
            text += "\nüìÖ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:</b>\n"
            for day, count in analytics_data["day_of_week_stats"].items():
                text += f"‚Ä¢ {day}: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"

        # –ü–∏–∫–æ–≤—ã–π —á–∞—Å
        if "peak_hour" in analytics_data:
            text += f"\nüïê <b>–ü–∏–∫–æ–≤—ã–π —á–∞—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b> {analytics_data['peak_hour']}:00 ({analytics_data['peak_hour_count']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)\n"

        # –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        if "total_groups" in analytics_data:
            text += f"\nüéØ <b>–ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:</b>\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø: {analytics_data['total_groups']}\n"
            text += f"‚Ä¢ –°–∞–º–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞: {analytics_data['top_group']} ({analytics_data['top_group_count']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)\n"

        # –ü—Ä–æ–≥–Ω–æ–∑—ã
        if "avg_daily_growth" in analytics_data:
            text += f"\nüìä <b>–ü—Ä–æ–≥–Ω–æ–∑—ã:</b>\n"
            text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ—Å—É—Ç–æ—á–Ω—ã–π —Ä–æ—Å—Ç: {analytics_data['avg_daily_growth']:.1f} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            text += f"‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é: +{analytics_data['weekly_forecast']:.0f} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"

        return text

