"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel –≤ SQL
"""
import os
import sys
import sqlite3
import logging
from datetime import datetime
import pandas as pd

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –¥–ª—è Windows –∫–æ–Ω—Å–æ–ª–∏
if sys.platform == 'win32':
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def create_sql_schema(conn):
    """–°–æ–∑–¥–∞–Ω–∏–µ SQL —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            phone TEXT,
            gender TEXT,
            is_premium INTEGER DEFAULT 0,
            is_verified INTEGER DEFAULT 0,
            last_activity_utc TEXT,
            collected_at TEXT NOT NULL,
            source_group TEXT,
            group_id TEXT,
            account_type TEXT,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            updated_at TEXT DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    cursor.execute('CREATE INDEX IF NOT EXISTS idx_user_id ON users(user_id)')
    cursor.execute('CREATE INDEX IF NOT EXISTS idx_username ON users(username)')
    cursor.execute('CREATE INDEX IF NOT EXISTS idx_collected_at ON users(collected_at)')
    cursor.execute('CREATE INDEX IF NOT EXISTS idx_source_group ON users(source_group)')
    cursor.execute('CREATE UNIQUE INDEX IF NOT EXISTS idx_user_unique ON users(user_id, collected_at, source_group)')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–∏
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS migration_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            migration_date TEXT NOT NULL,
            records_migrated INTEGER NOT NULL,
            source_file TEXT NOT NULL,
            status TEXT NOT NULL,
            notes TEXT
        )
    ''')
    
    conn.commit()
    logging.info("SQL schema created successfully")


def migrate_excel_to_sql(excel_path, db_path):
    """–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel –≤ SQLite"""
    
    if not os.path.exists(excel_path):
        logging.error(f"Excel file not found: {excel_path}")
        return False
    
    try:
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        logging.info(f"Reading Excel file: {excel_path}")
        df = pd.read_excel(excel_path)
        logging.info(f"Found {len(df)} records in Excel file")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQLite –±–∞–∑–µ
        conn = sqlite3.connect(db_path)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É
        create_sql_schema(conn)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        cursor = conn.cursor()
        records_inserted = 0
        records_skipped = 0
        
        for idx, row in df.iterrows():
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
                user_id = int(row.get('User_id', 0)) if pd.notna(row.get('User_id')) else 0
                username = str(row.get('Username', '')) if pd.notna(row.get('Username')) else None
                first_name = str(row.get('–ò–º—è', '')) if pd.notna(row.get('–ò–º—è')) else None
                last_name = str(row.get('–§–∞–º–∏–ª–∏—è', '')) if pd.notna(row.get('–§–∞–º–∏–ª–∏—è')) else None
                phone = str(row.get('–¢–µ–ª–µ—Ñ–æ–Ω', '')) if pd.notna(row.get('–¢–µ–ª–µ—Ñ–æ–Ω')) else None
                gender = str(row.get('–ü–æ–ª', '')) if pd.notna(row.get('–ü–æ–ª')) else None
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ is_premium —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–∫—Å—Ç–∞ "–î–∞"/"–ù–µ—Ç"
                premium_value = row.get('–ü—Ä–µ–º–∏—É–º')
                if pd.notna(premium_value):
                    if isinstance(premium_value, str):
                        is_premium = 1 if premium_value.lower() in ['–¥–∞', 'yes', 'true', '1'] else 0
                    else:
                        is_premium = int(premium_value) if premium_value else 0
                else:
                    is_premium = 0
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ is_verified —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–∫—Å—Ç–∞ "–î–∞"/"–ù–µ—Ç"
                verified_value = row.get('Verified')
                if pd.notna(verified_value):
                    if isinstance(verified_value, str):
                        is_verified = 1 if verified_value.lower() in ['–¥–∞', 'yes', 'true', '1'] else 0
                    else:
                        is_verified = int(verified_value) if verified_value else 0
                else:
                    is_verified = 0
                last_activity = str(row.get('–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (UTC)', '')) if pd.notna(row.get('–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (UTC)')) else None
                collected_at = str(row.get('–í—Ä–µ–º—è —Å–±–æ—Ä–∞ (UTC+1)', '')) if pd.notna(row.get('–í—Ä–µ–º—è —Å–±–æ—Ä–∞ (UTC+1)')) else datetime.now().isoformat()
                source_group = str(row.get('–ò—Å—Ç–æ—á–Ω–∏–∫ –≥—Ä—É–ø–ø—ã', '')) if pd.notna(row.get('–ò—Å—Ç–æ—á–Ω–∏–∫ –≥—Ä—É–ø–ø—ã')) else None
                group_id = str(row.get('ID –≥—Ä—É–ø–ø—ã', '')) if pd.notna(row.get('ID –≥—Ä—É–ø–ø—ã')) else None
                account_type = str(row.get('–¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞', 'Unknown')) if pd.notna(row.get('–¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞')) else 'Unknown'
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –Ω—É–ª–µ–≤—ã–º user_id
                if user_id == 0:
                    records_skipped += 1
                    continue
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                cursor.execute('''
                    INSERT OR IGNORE INTO users (
                        user_id, username, first_name, last_name, phone, 
                        gender, is_premium, is_verified, last_activity_utc,
                        collected_at, source_group, group_id, account_type
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    user_id, username, first_name, last_name, phone,
                    gender, is_premium, is_verified, last_activity,
                    collected_at, source_group, group_id, account_type
                ))
                
                records_inserted += cursor.rowcount
                
            except Exception as e:
                logging.error(f"Error processing row {idx}: {e}")
                records_skipped += 1
                continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏–≥—Ä–∞—Ü–∏–∏
        cursor.execute('''
            INSERT INTO migration_history (
                migration_date, records_migrated, source_file, status, notes
            ) VALUES (?, ?, ?, ?, ?)
        ''', (
            datetime.now().isoformat(),
            records_inserted,
            excel_path,
            'SUCCESS',
            f'Successfully migrated {records_inserted} records, skipped {records_skipped} records'
        ))
        
        conn.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cursor.execute('SELECT COUNT(*) FROM users')
        total_records = cursor.fetchone()[0]
        
        logging.info(f"Migration completed successfully!")
        logging.info(f"Records inserted: {records_inserted}")
        logging.info(f"Records skipped: {records_skipped}")
        logging.info(f"Total records in database: {total_records}")
        
        conn.close()
        return True
        
    except Exception as e:
        logging.error(f"Migration failed: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    excel_path = 'bot/data/all_users.xlsx'
    db_path = 'bot/data/all_users.db'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
    if not os.path.exists(excel_path):
        # –ò—â–µ–º –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
        excel_path = 'all_users.xlsx'
        if not os.path.exists(excel_path):
            logging.error("Excel file not found!")
            print("\n‚ö†Ô∏è  Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            print(f"–û–∂–∏–¥–∞–µ—Ç—Å—è: bot/data/all_users.xlsx –∏–ª–∏ all_users.xlsx")
            return False
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π SQL –±–∞–∑—ã
    if os.path.exists(db_path):
        backup_path = f"{db_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        import shutil
        shutil.copy2(db_path, backup_path)
        logging.info(f"Created backup: {backup_path}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    print("\nüöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ Excel –≤ SQL...")
    print(f"üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {excel_path}")
    print(f"üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    print("-" * 60)
    
    success = migrate_excel_to_sql(excel_path, db_path)
    
    if success:
        print("-" * 60)
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞: {db_path}")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é Excel —Ñ–∞–π–ª–∞
        if os.path.exists(excel_path):
            excel_backup = f"{excel_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            import shutil
            shutil.copy2(excel_path, excel_backup)
            print(f"üìã –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è Excel: {excel_backup}")
    else:
        print("-" * 60)
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å!")
        return False
    
    return True


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

