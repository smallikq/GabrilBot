import os
import logging
from aiogram import types, F

from ..utils.database import DatabaseManager
from ..aiogram_loader import dp


@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
async def show_combined_stats(message: types.Message):
    """–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"""
    try:
        import pandas as pd
        from ..utils.analytics import Analytics
        from ..keyboards.settings_menu import get_combined_stats_keyboard
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = DatabaseManager.get_database_stats()
        
        if 'error' in stats:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {stats['error']}")
            return
        
        if stats['total_users'] == 0:
            await message.answer("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        df = DatabaseManager.get_all_users()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        combined_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞</b>\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        combined_text += f"<b>‚ïê‚ïê‚ïê –û–°–ù–û–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ‚ïê‚ïê‚ïê</b>\n"
        combined_text += f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {stats['total_users']:,}\n"
        combined_text += f"üè∑ <b>–° username:</b> {stats['with_username']:,} ({stats['with_username'] / stats['total_users'] * 100:.1f}%)\n"
        combined_text += f"üè∑ <b>–ë–µ–∑ username:</b> {stats['total_users'] - stats['with_username']:,} ({(stats['total_users'] - stats['with_username']) / stats['total_users'] * 100:.1f}%)\n"
        
        if stats.get('premium_users', 0) > 0:
            combined_text += f"üíé <b>Premium:</b> {stats['premium_users']:,}\n"
        
        if stats.get('verified_users', 0) > 0:
            combined_text += f"‚úÖ <b>Verified:</b> {stats['verified_users']:,}\n"
        
        # –ü–µ—Ä–∏–æ–¥ —Å–±–æ—Ä–∞
        if 'first_record' in stats and 'last_record' in stats:
            combined_text += f"\n<b>‚ïê‚ïê‚ïê –ü–ï–†–ò–û–î –°–ë–û–†–ê ‚ïê‚ïê‚ïê</b>\n"
            combined_text += f"üìÖ –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å: {stats['first_record'].strftime('%d.%m.%Y')}\n"
            combined_text += f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: {stats['last_record'].strftime('%d.%m.%Y')}\n"
        
        if 'most_active_day' in stats:
            combined_text += f"‚≠ê –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å: {stats['most_active_day']} ({stats['most_active_day_count']} –ø–æ–ª—å–∑.)\n"
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        if not df.empty:
            analytics_data = Analytics.get_enhanced_analytics(df)
            
            # –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if "peak_hour" in analytics_data:
                combined_text += f"\n<b>‚ïê‚ïê‚ïê –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ù–û–°–¢–ò ‚ïê‚ïê‚ïê</b>\n"
                combined_text += f"üïê –ü–∏–∫–æ–≤—ã–π —á–∞—Å: {analytics_data['peak_hour']}:00 ({analytics_data['peak_hour_count']} –ø–æ–ª—å–∑.)\n"
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
            if "day_of_week_stats" in analytics_data:
                combined_text += f"üìÖ <b>–¢–æ–ø-3 –¥–Ω—è –Ω–µ–¥–µ–ª–∏:</b>\n"
                for i, (day, count) in enumerate(list(analytics_data["day_of_week_stats"].items())[:3], 1):
                    combined_text += f"  {i}. {day}: {count} –ø–æ–ª—å–∑.\n"
            
            # –ü—Ä–æ–≥–Ω–æ–∑—ã
            if "avg_daily_growth" in analytics_data:
                combined_text += f"\n<b>‚ïê‚ïê‚ïê –ü–†–û–ì–ù–û–ó–´ –†–û–°–¢–ê ‚ïê‚ïê‚ïê</b>\n"
                combined_text += f"üìà –°—Ä–µ–¥–Ω–µ—Å—É—Ç–æ—á–Ω—ã–π —Ä–æ—Å—Ç: {analytics_data['avg_daily_growth']:.1f} –ø–æ–ª—å–∑.\n"
                combined_text += f"üìä –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é: +{analytics_data['weekly_forecast']:.0f} –ø–æ–ª—å–∑.\n"
        
        # –¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        if 'top_sources' in stats:
            combined_text += f"\n<b>‚ïê‚ïê‚ïê –¢–û–ü-5 –ò–°–¢–û–ß–ù–ò–ö–û–í ‚ïê‚ïê‚ïê</b>\n"
            for i, (source, count) in enumerate(list(stats['top_sources'].items())[:5], 1):
                combined_text += f"{i}. {source[:35]}: {count}\n"
        
        await message.answer(combined_text, reply_markup=get_combined_stats_keyboard(), parse_mode="HTML")
    
    except Exception as e:
        logging.error(f"Error in combined stats: {e}", exc_info=True)
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


@dp.callback_query(F.data == "refresh_stats")
async def refresh_stats(callback_query: types.CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await callback_query.answer("–û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    await show_combined_stats(callback_query.message)


@dp.callback_query(F.data == "create_analytics_report")
async def create_analytics_report(callback_query: types.CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    await callback_query.answer("–°–æ–∑–¥–∞—é –æ—Ç—á–µ—Ç...")
    
    try:
        import os
        from ..utils.analytics import Analytics
        from ..aiogram_loader import bot
        from aiogram.types import FSInputFile
        from datetime import datetime
        import pandas as pd
        
        df = DatabaseManager.get_all_users()
        
        if df.empty:
            await bot.send_message(callback_query.message.chat.id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ –≤–∏–¥–µ HTML
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_path = f'bot/data/exports/analytics_report_{timestamp}.html'
        
        analytics_data = Analytics.get_enhanced_analytics(df)
        
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>–û—Ç—á–µ—Ç –ê–Ω–∞–ª–∏—Ç–∏–∫–∏</title>
            <style>
                body {{ font-family: Arial, sans-serif; padding: 20px; background: #f5f5f5; }}
                .container {{ max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }}
                h1 {{ color: #2c3e50; border-bottom: 3px solid #3498db; padding-bottom: 10px; }}
                h2 {{ color: #34495e; margin-top: 30px; }}
                .stat-box {{ display: inline-block; background: #ecf0f1; padding: 15px 25px; margin: 10px; border-radius: 5px; }}
                .stat-value {{ font-size: 28px; font-weight: bold; color: #3498db; }}
                .stat-label {{ font-size: 14px; color: #7f8c8d; }}
                table {{ width: 100%; border-collapse: collapse; margin: 20px 0; }}
                th, td {{ padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }}
                th {{ background-color: #3498db; color: white; }}
                tr:hover {{ background-color: #f5f5f5; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üìä –û—Ç—á–µ—Ç –ê–Ω–∞–ª–∏—Ç–∏–∫–∏ Telegram Parser Bot</h1>
                <p><strong>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</strong> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</p>
                
                <h2>–û—Å–Ω–æ–≤–Ω–∞—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
                <div class="stat-box">
                    <div class="stat-value">{analytics_data['total_users']:,}</div>
                    <div class="stat-label">–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
                </div>
                <div class="stat-box">
                    <div class="stat-value">{analytics_data['with_username']:,}</div>
                    <div class="stat-label">–° username</div>
                </div>
                <div class="stat-box">
                    <div class="stat-value">{analytics_data.get('premium_users', 0):,}</div>
                    <div class="stat-label">Premium</div>
                </div>
                
                <h2>–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ</h2>
                <table>
                    <tr>
                        <th>–ú–µ—Ç—Ä–∏–∫–∞</th>
                        <th>–ó–Ω–∞—á–µ–Ω–∏–µ</th>
                        <th>–ü—Ä–æ—Ü–µ–Ω—Ç</th>
                    </tr>
                    <tr>
                        <td>–° username</td>
                        <td>{analytics_data['with_username']:,}</td>
                        <td>{analytics_data['with_username'] / analytics_data['total_users'] * 100:.1f}%</td>
                    </tr>
                    <tr>
                        <td>–ë–µ–∑ username</td>
                        <td>{analytics_data['without_username']:,}</td>
                        <td>{analytics_data['without_username'] / analytics_data['total_users'] * 100:.1f}%</td>
                    </tr>
        """
        
        if analytics_data.get('premium_users', 0) > 0:
            html_content += f"""
                    <tr>
                        <td>Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</td>
                        <td>{analytics_data['premium_users']:,}</td>
                        <td>{analytics_data['premium_users'] / analytics_data['total_users'] * 100:.1f}%</td>
                    </tr>
            """
        
        if "total_groups" in analytics_data:
            html_content += f"""
                </table>
                <h2>–ê–Ω–∞–ª–∏–∑ –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤</h2>
                <p><strong>–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø:</strong> {analytics_data['total_groups']}</p>
                <p><strong>–°–∞–º–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞:</strong> {analytics_data['top_group']} ({analytics_data['top_group_count']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)</p>
            """
        
        html_content += """
            </div>
        </body>
        </html>
        """
        
        os.makedirs('bot/data/exports', exist_ok=True)
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        await bot.send_document(
            callback_query.message.chat.id,
            FSInputFile(report_path, filename=f'analytics_report_{timestamp}.html'),
            caption="üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å–æ–∑–¥–∞–Ω"
        )
        
    except Exception as e:
        logging.error(f"Error creating analytics report: {e}", exc_info=True)
        from ..aiogram_loader import bot
        await bot.send_message(callback_query.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")


@dp.callback_query(F.data == "export_stats")
async def export_stats_callback(callback_query: types.CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await callback_query.answer("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    
    try:
        from ..aiogram_loader import bot
        from aiogram.types import FSInputFile
        from datetime import datetime
        
        stats = DatabaseManager.get_database_stats()
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_path = f'bot/data/exports/stats_{timestamp}.csv'
        os.makedirs('bot/data/exports', exist_ok=True)
        
        with open(stats_path, 'w', encoding='utf-8') as f:
            f.write("–ú–µ—Ç—Ä–∏–∫–∞,–ó–Ω–∞—á–µ–Ω–∏–µ\n")
            f.write(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,{stats.get('total_users', 0)}\n")
            f.write(f"–° username,{stats.get('with_username', 0)}\n")
            f.write(f"Premium,{stats.get('premium_users', 0)}\n")
            f.write(f"Verified,{stats.get('verified_users', 0)}\n")
            if 'first_record' in stats:
                f.write(f"–ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å,{stats['first_record'].strftime('%d.%m.%Y')}\n")
            if 'last_record' in stats:
                f.write(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å,{stats['last_record'].strftime('%d.%m.%Y')}\n")
        
        await bot.send_document(
            callback_query.message.chat.id,
            FSInputFile(stats_path, filename=f'stats_{timestamp}.csv'),
            caption="üìä –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        )
        
    except Exception as e:
        logging.error(f"Error exporting stats: {e}")
        await bot.send_message(callback_query.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")


@dp.callback_query(F.data == "create_charts")
async def create_charts(callback_query: types.CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    await callback_query.answer("–°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫–∏...")
    
    try:
        import os
        from ..aiogram_loader import bot
        from aiogram.types import FSInputFile
        import matplotlib
        matplotlib.use('Agg')
        import matplotlib.pyplot as plt
        import pandas as pd
        from datetime import datetime
        
        df = DatabaseManager.get_all_users()
        
        if df.empty:
            await bot.send_message(callback_query.message.chat.id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
            return
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        chart_path = f'bot/data/exports/charts_{timestamp}.png'
        os.makedirs('bot/data/exports', exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        fig, axes = plt.subplots(2, 2, figsize=(15, 12))
        fig.suptitle('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', fontsize=16, fontweight='bold')
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: Username vs No Username
        username_counts = [df["Username"].notna().sum(), df["Username"].isna().sum()]
        axes[0, 0].pie(username_counts, labels=['–° username', '–ë–µ–∑ username'], autopct='%1.1f%%', colors=['#3498db', '#e74c3c'])
        axes[0, 0].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ username')
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        if "–ü—Ä–µ–º–∏—É–º" in df.columns:
            premium_counts = df["–ü—Ä–µ–º–∏—É–º"].value_counts()
            axes[0, 1].bar(['–û–±—ã—á–Ω—ã–µ', 'Premium'], [len(df) - premium_counts.get(True, 0), premium_counts.get(True, 0)], color=['#95a5a6', '#f39c12'])
            axes[0, 1].set_title('Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
            axes[0, 1].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        
        # –ì—Ä–∞—Ñ–∏–∫ 3: –¢–æ–ø-10 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        if "–ò—Å—Ç–æ—á–Ω–∏–∫ –≥—Ä—É–ø–ø—ã" in df.columns:
            top_sources = df["–ò—Å—Ç–æ—á–Ω–∏–∫ –≥—Ä—É–ø–ø—ã"].value_counts().head(10)
            axes[1, 0].barh(range(len(top_sources)), top_sources.values, color='#16a085')
            axes[1, 0].set_yticks(range(len(top_sources)))
            axes[1, 0].set_yticklabels([s[:30] for s in top_sources.index], fontsize=8)
            axes[1, 0].set_title('–¢–æ–ø-10 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤')
            axes[1, 0].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
        
        # –ì—Ä–∞—Ñ–∏–∫ 4: –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∏)
        if "–í—Ä–µ–º—è —Å–±–æ—Ä–∞ (UTC+1)" in df.columns:
            df["–í—Ä–µ–º—è —Å–±–æ—Ä–∞ (UTC+1)"] = pd.to_datetime(df["–í—Ä–µ–º—è —Å–±–æ—Ä–∞ (UTC+1)"], errors="coerce")
            df_time = df.dropna(subset=["–í—Ä–µ–º—è —Å–±–æ—Ä–∞ (UTC+1)"])
            if not df_time.empty:
                daily_counts = df_time.groupby(df_time["–í—Ä–µ–º—è —Å–±–æ—Ä–∞ (UTC+1)"].dt.date).size()
                axes[1, 1].plot(daily_counts.index, daily_counts.values, marker='o', color='#9b59b6', linewidth=2)
                axes[1, 1].set_title('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º')
                axes[1, 1].set_xlabel('–î–∞—Ç–∞')
                axes[1, 1].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
                axes[1, 1].tick_params(axis='x', rotation=45)
        
        plt.tight_layout()
        plt.savefig(chart_path, dpi=150, bbox_inches='tight')
        plt.close()
        
        await bot.send_photo(
            callback_query.message.chat.id,
            FSInputFile(chart_path),
            caption="üìà –ì—Ä–∞—Ñ–∏–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(chart_path)
        except:
            pass
        
    except Exception as e:
        logging.error(f"Error creating charts: {e}", exc_info=True)
        from ..aiogram_loader import bot
        await bot.send_message(callback_query.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")



