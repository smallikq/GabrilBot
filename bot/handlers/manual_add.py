"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import logging
from datetime import datetime
from aiogram import types, F
from aiogram.fsm.context import FSMContext

from ..aiogram_loader import dp
from ..states.form_states import Form
from ..keyboards.main_menu import get_enhanced_main_keyboard
from ..utils.database import DatabaseManager


@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å ID –≤—Ä—É—á–Ω—É—é")
async def manual_add_menu(message: types.Message, state: FSMContext):
    """–ú–µ–Ω—é —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ID"""
    await state.set_state(Form.waiting_for_manual_ids)
    
    add_text = (
        "‚ûï <b>–†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n"
        "<b>–§–æ—Ä–º–∞—Ç 1:</b> –¢–æ–ª—å–∫–æ ID\n"
        "<code>123456789</code>\n\n"
        "<b>–§–æ—Ä–º–∞—Ç 2:</b> ID —Å username\n"
        "<code>123456789 @username</code>\n\n"
        "<b>–§–æ—Ä–º–∞—Ç 3:</b> ID —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏\n"
        "<code>123456789 @username –ò–º—è –§–∞–º–∏–ª–∏—è</code>\n\n"
        "<b>–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
        "–ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:\n"
        "<code>123456789 @user1\n"
        "987654321 @user2 –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤\n"
        "555555555</code>\n\n"
        "üí° <b>–°–æ–≤–µ—Ç—ã:</b>\n"
        "‚Ä¢ Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @\n"
        "‚Ä¢ –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Ä–∞–∑"
    )
    
    from ..keyboards.settings_menu import get_cancel_keyboard
    await message.answer(add_text, reply_markup=get_cancel_keyboard(), parse_mode="HTML")


@dp.message(Form.waiting_for_manual_ids)
async def process_manual_ids(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ID"""
    try:
        lines = message.text.strip().split('\n')
        
        if len(lines) > 50:
            await message.answer("‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Ä–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        added_users = []
        skipped_users = []
        errors = []
        
        status_msg = await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
        
        for i, line in enumerate(lines, 1):
            try:
                parts = line.strip().split()
                
                if not parts:
                    continue
                
                # –ü–∞—Ä—Å–∏–º ID
                try:
                    user_id = int(parts[0])
                except ValueError:
                    errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –Ω–µ–≤–µ—Ä–Ω—ã–π ID '{parts[0]}'")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
                existing = DatabaseManager.get_user_by_id(user_id)
                if existing is not None and not existing.empty:
                    skipped_users.append(user_id)
                    continue
                
                # –ü–∞—Ä—Å–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                username = None
                first_name = None
                last_name = None
                
                for part in parts[1:]:
                    if part.startswith('@'):
                        username = part
                    elif first_name is None:
                        first_name = part
                    elif last_name is None:
                        last_name = part
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É
                user_data = {
                    'user_id': user_id,
                    'username': username,
                    'first_name': first_name,
                    'last_name': last_name,
                    'source_group': '–†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ',
                    'collection_time': datetime.now(),
                    'is_premium': False,
                    'is_verified': False,
                    'is_bot': False,
                    'is_fake': False,
                    'is_scam': False
                }
                
                success = DatabaseManager.add_user(user_data)
                
                if success:
                    added_users.append(user_id)
                else:
                    errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ID {user_id}")
                
            except Exception as e:
                logging.error(f"Error processing line {i}: {e}")
                errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: {str(e)}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è</b>\n\n"
        
        if added_users:
            report += f"‚úÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ:</b> {len(added_users)}\n"
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö ID
            preview = added_users[:10]
            report += "<code>" + ", ".join(map(str, preview)) + "</code>"
            if len(added_users) > 10:
                report += f"\n... –∏ –µ—â—ë {len(added_users) - 10}\n"
            else:
                report += "\n"
        
        if skipped_users:
            report += f"\n‚è≠ <b>–ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –µ—Å—Ç—å):</b> {len(skipped_users)}\n"
        
        if errors:
            report += f"\n‚ùå <b>–û—à–∏–±–æ–∫:</b> {len(errors)}\n"
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
            for error in errors[:5]:
                report += f"‚Ä¢ {error}\n"
            if len(errors) > 5:
                report += f"... –∏ –µ—â—ë {len(errors) - 5} –æ—à–∏–±–æ–∫\n"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î
        stats = DatabaseManager.get_database_stats()
        report += f"\nüìà <b>–í—Å–µ–≥–æ –≤ –±–∞–∑–µ:</b> {stats.get('total_users', 0):,} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        await message.answer(report, parse_mode="HTML", reply_markup=get_enhanced_main_keyboard())
        
        try:
            await status_msg.delete()
        except:
            pass
        
        await state.clear()
    
    except Exception as e:
        logging.error(f"Error in manual add: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}", reply_markup=get_enhanced_main_keyboard())
        await state.clear()

