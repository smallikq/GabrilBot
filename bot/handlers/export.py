import os
import logging
from aiogram import types, F
from aiogram.types import FSInputFile
from datetime import datetime
import pandas as pd

from ..utils.export_manager import ExportManager
from ..keyboards.export_menu import get_export_keyboard
from ..aiogram_loader import dp, bot


@dp.message(F.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
async def export_menu(message: types.Message):
    """–ú–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö (–∏–∑ SQL)"""
    try:
        from ..utils.database import DatabaseManager
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ SQL –±–∞–∑—ã
        stats = DatabaseManager.get_database_stats()
        total_users = stats.get('total_users', 0)
        
        if total_users == 0:
            await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return

        export_text = f"üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
        export_text += f"üìä –í –±–∞–∑–µ: {total_users:,} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        export_text += f"üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n\n"
        export_text += f"‚Ä¢ <b>Excel</b> - –ø–æ–ª–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å\n"
        export_text += f"‚Ä¢ <b>CSV</b> - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n"
        export_text += f"‚Ä¢ <b>JSON</b> - –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤\n"
        export_text += f"‚Ä¢ <b>–û—Ç—á–µ—Ç</b> - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
        export_text += f"‚Ä¢ <b>–ê—Ä—Ö–∏–≤</b> - –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Ä–∞–∑—É"

        await message.answer(export_text, reply_markup=get_export_keyboard(), parse_mode="HTML")

    except Exception as e:
        logging.error(f"Error in export menu: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@dp.callback_query(F.data.startswith('export_'))
async def handle_export(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö (–∏–∑ SQL)"""
    await callback_query.answer("–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —ç–∫—Å–ø–æ—Ä—Ç...")

    export_type = callback_query.data.split('_')[1]

    try:
        from ..utils.database import DatabaseManager
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ SQL –±–∞–∑—ã
        df = DatabaseManager.get_all_users()
        
        if df.empty:
            await bot.send_message(callback_query.message.chat.id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
            
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

        status_msg = await bot.send_message(
            callback_query.message.chat.id,
            f"‚è≥ –°–æ–∑–¥–∞—é —ç–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ {export_type.upper()}..."
        )

        if export_type == 'excel':
            file_path = f'bot/data/exports/export_{timestamp}.xlsx'
            df.to_excel(file_path, index=False)
            caption = f"üìä –≠–∫—Å–ø–æ—Ä—Ç Excel ({len(df)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"

        elif export_type == 'csv':
            file_path = await ExportManager.export_to_csv(df, f'export_{timestamp}')
            caption = f"üìù –≠–∫—Å–ø–æ—Ä—Ç CSV ({len(df)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"

        elif export_type == 'json':
            file_path = await ExportManager.export_to_json(df, f'export_{timestamp}')
            caption = f"üìã –≠–∫—Å–ø–æ—Ä—Ç JSON ({len(df)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"

        elif export_type == 'report':
            file_path = await ExportManager.create_report(df, f'export_{timestamp}')
            caption = f"üìë –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç ({len(df)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"

        elif export_type == 'all':
            file_path = await ExportManager.create_complete_export(df, f'export_{timestamp}')
            caption = f"üì¶ –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç - –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã ({len(df)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"

        await bot.edit_message_text(
            f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...",
            callback_query.message.chat.id,
            status_msg.message_id
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        if file_path and os.path.exists(file_path):
            with open(file_path, 'rb') as f:
                await bot.send_document(
                    callback_query.message.chat.id,
                    FSInputFile(file_path, filename=os.path.basename(file_path)),
                    caption=caption
                )

            await bot.delete_message(callback_query.message.chat.id, status_msg.message_id)
        else:
            await bot.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞",
                callback_query.message.chat.id,
                status_msg.message_id
            )

    except Exception as e:
        logging.error(f"Export error: {e}")
        await bot.send_message(callback_query.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")

