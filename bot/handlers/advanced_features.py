"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞: –±—ç–∫–∞–ø—ã, –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, —Ñ–∏–ª—å—Ç—Ä—ã
"""

import os
import logging
import shutil
from datetime import datetime
from aiogram import types, F
from aiogram.types import FSInputFile
from aiogram.fsm.context import FSMContext

from ..aiogram_loader import dp, bot
from ..utils.database import DatabaseManager
from ..keyboards.main_menu import get_enhanced_main_keyboard
from ..states.form_states import Form


@dp.message(F.text == "üíæ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø")
async def create_backup_manual(message: types.Message):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        status_msg = await message.answer("üíæ –°–æ–∑–¥–∞—é –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
        backup_dir = 'bot/data/backups'
        os.makedirs(backup_dir, exist_ok=True)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = f'{backup_dir}/backup_{timestamp}.db'
        
        db_path = DatabaseManager.DB_PATH
        if os.path.exists(db_path):
            shutil.copy2(db_path, backup_path)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            backup_size = os.path.getsize(backup_path) / (1024 * 1024)  # –ú–ë
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = DatabaseManager.get_database_stats()
            
            caption = f"üíæ <b>–ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            caption += f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
            caption += f"üíΩ –†–∞–∑–º–µ—Ä: {backup_size:.2f} –ú–ë\n"
            caption += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0):,}\n"
            caption += f"üè∑ –° username: {stats.get('with_username', 0):,}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—ç–∫–∞–ø —Ñ–∞–π–ª
            await bot.send_document(
                message.chat.id,
                FSInputFile(backup_path, filename=f'backup_{timestamp}.db'),
                caption=caption,
                parse_mode="HTML"
            )
            
            await bot.delete_message(message.chat.id, status_msg.message_id)
            
        else:
            await bot.edit_message_text(
                "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                message.chat.id,
                status_msg.message_id
            )
    
    except Exception as e:
        logging.error(f"Error creating backup: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")


@dp.message(F.text == "üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫")
async def advanced_search_menu(message: types.Message):
    """–ú–µ–Ω—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    from ..keyboards.settings_menu import get_advanced_search_keyboard
    
    search_text = (
        "üîç <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞:"
    )
    
    await message.answer(search_text, reply_markup=get_advanced_search_keyboard(), parse_mode="HTML")


@dp.callback_query(F.data == "search_by_premium")
async def search_by_premium(callback_query: types.CallbackQuery):
    """–ü–æ–∏—Å–∫ Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    await callback_query.answer("–ò—â—É Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    try:
        with DatabaseManager.get_connection() as conn:
            query = '''
                SELECT user_id, username, first_name, last_name, source_group
                FROM users
                WHERE is_premium = 1
                ORDER BY collected_at DESC
                LIMIT 50
            '''
            import pandas as pd
            df = pd.read_sql_query(query, conn)
        
        if df.empty:
            await bot.send_message(callback_query.message.chat.id, "üíé Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        result_text = f"üíé <b>Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(df)}):</b>\n\n"
        
        for i, (_, user) in enumerate(df.head(20).iterrows(), 1):
            result_text += f"{i}. <b>ID:</b> <code>{user['user_id']}</code>\n"
            if pd.notna(user['username']):
                result_text += f"   <b>Username:</b> {user['username']}\n"
            if pd.notna(user['first_name']):
                result_text += f"   <b>–ò–º—è:</b> {user['first_name']}\n"
            result_text += "\n"
        
        if len(df) > 20:
            result_text += f"... –∏ –µ—â—ë {len(df) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        await bot.send_message(callback_query.message.chat.id, result_text, parse_mode="HTML")
    
    except Exception as e:
        logging.error(f"Error searching premium users: {e}")
        await bot.send_message(callback_query.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")


@dp.callback_query(F.data == "search_by_group")
async def search_by_group(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∏—Å–∫ –ø–æ –≥—Ä—É–ø–ø–µ"""
    await callback_query.answer()
    await state.set_state(Form.waiting_for_group_filter)
    
    await bot.send_message(
        callback_query.message.chat.id,
        "üéØ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã</code>\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode="HTML"
    )


@dp.message(Form.waiting_for_group_filter)
async def process_group_filter(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –≥—Ä—É–ø–ø–µ"""
    if message.text.strip().lower() == '/cancel':
        await state.clear()
        await message.answer("‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=get_enhanced_main_keyboard())
        return
    
    try:
        group_name = message.text.strip()
        
        with DatabaseManager.get_connection() as conn:
            query = '''
                SELECT user_id, username, first_name, last_name, source_group, collected_at
                FROM users
                WHERE source_group LIKE ?
                ORDER BY collected_at DESC
                LIMIT 100
            '''
            import pandas as pd
            df = pd.read_sql_query(query, conn, params=(f'%{group_name}%',))
        
        if df.empty:
            await message.answer(f"üîç –í –≥—Ä—É–ø–ø–µ '<code>{group_name}</code>' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", parse_mode="HTML")
        else:
            result_text = f"üéØ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –≥—Ä—É–ø–ø—ã '{group_name}':</b>\n"
            result_text += f"<b>–ù–∞–π–¥–µ–Ω–æ:</b> {len(df)}\n\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
            groups = df.groupby('source_group').size()
            result_text += "<b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥—Ä—É–ø–ø–∞–º:</b>\n"
            for group, count in groups.head(10).items():
                result_text += f"‚Ä¢ {group[:40]}: {count}\n"
            
            result_text += f"\n<b>–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {df['user_id'].nunique()}"
            
            await message.answer(result_text, parse_mode="HTML")
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç
            if len(df) > 0:
                from ..keyboards.settings_menu import get_export_filter_keyboard
                await message.answer(
                    "üíæ –•–æ—Ç–∏—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?",
                    reply_markup=get_export_filter_keyboard(group_name)
                )
        
        await state.clear()
    
    except Exception as e:
        logging.error(f"Error filtering by group: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        await state.clear()


@dp.callback_query(F.data.startswith("export_filter_"))
async def export_filtered_results(callback_query: types.CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    await callback_query.answer("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é...")
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥—Ä—É–ø–ø—É –∏–∑ callback_data
        group_name = callback_query.data.replace("export_filter_", "")
        
        with DatabaseManager.get_connection() as conn:
            query = '''
                SELECT *
                FROM users
                WHERE source_group LIKE ?
                ORDER BY collected_at DESC
            '''
            import pandas as pd
            df = pd.read_sql_query(query, conn, params=(f'%{group_name}%',))
        
        if df.empty:
            await bot.send_message(callback_query.message.chat.id, "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ Excel
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        export_path = f'bot/data/exports/filtered_{timestamp}.xlsx'
        os.makedirs('bot/data/exports', exist_ok=True)
        
        df.to_excel(export_path, index=False)
        
        await bot.send_document(
            callback_query.message.chat.id,
            FSInputFile(export_path, filename=f'filtered_{group_name}_{timestamp}.xlsx'),
            caption=f"üìä –≠–∫—Å–ø–æ—Ä—Ç –ø–æ –≥—Ä—É–ø–ø–µ: {group_name}\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(df)}"
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(export_path)
        except:
            pass
    
    except Exception as e:
        logging.error(f"Error exporting filtered results: {e}")
        await bot.send_message(callback_query.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")


@dp.callback_query(F.data == "search_by_date")
async def search_by_date(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ"""
    await callback_query.answer()
    await state.set_state(Form.waiting_for_date)
    
    await bot.send_message(
        callback_query.message.chat.id,
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>15.01.2024</code>\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode="HTML"
    )


@dp.callback_query(F.data == "search_recent")
async def search_recent(callback_query: types.CallbackQuery):
    """–ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    await callback_query.answer("–ü–æ–ª—É—á–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏...")
    
    try:
        with DatabaseManager.get_connection() as conn:
            query = '''
                SELECT user_id, username, first_name, source_group, collected_at
                FROM users
                ORDER BY collected_at DESC
                LIMIT 30
            '''
            import pandas as pd
            df = pd.read_sql_query(query, conn)
        
        if df.empty:
            await bot.send_message(callback_query.message.chat.id, "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        
        result_text = f"üïê <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(df)} –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö:</b>\n\n"
        
        for i, (_, user) in enumerate(df.iterrows(), 1):
            result_text += f"{i}. <code>{user['user_id']}</code>"
            if pd.notna(user['username']):
                result_text += f" | {user['username']}"
            if pd.notna(user['first_name']):
                result_text += f" | {user['first_name']}"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            try:
                date = pd.to_datetime(user['collected_at'])
                result_text += f"\n   üìÖ {date.strftime('%d.%m.%Y %H:%M')}"
            except:
                pass
            
            result_text += "\n\n"
        
        await bot.send_message(callback_query.message.chat.id, result_text, parse_mode="HTML")
    
    except Exception as e:
        logging.error(f"Error searching recent: {e}")
        await bot.send_message(callback_query.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")


@dp.callback_query(F.data == "search_by_verified")
async def search_by_verified(callback_query: types.CallbackQuery):
    """–ü–æ–∏—Å–∫ Verified –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    await callback_query.answer("–ò—â—É Verified –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    try:
        with DatabaseManager.get_connection() as conn:
            query = '''
                SELECT user_id, username, first_name, last_name, source_group
                FROM users
                WHERE is_verified = 1
                ORDER BY collected_at DESC
                LIMIT 50
            '''
            import pandas as pd
            df = pd.read_sql_query(query, conn)
        
        if df.empty:
            await bot.send_message(callback_query.message.chat.id, "‚úÖ Verified –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        result_text = f"‚úÖ <b>Verified –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(df)}):</b>\n\n"
        
        for i, (_, user) in enumerate(df.head(20).iterrows(), 1):
            result_text += f"{i}. <b>ID:</b> <code>{user['user_id']}</code>\n"
            if pd.notna(user['username']):
                result_text += f"   <b>Username:</b> {user['username']}\n"
            if pd.notna(user['first_name']):
                result_text += f"   <b>–ò–º—è:</b> {user['first_name']}\n"
            result_text += "\n"
        
        if len(df) > 20:
            result_text += f"... –∏ –µ—â—ë {len(df) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        await bot.send_message(callback_query.message.chat.id, result_text, parse_mode="HTML")
    
    except Exception as e:
        logging.error(f"Error searching verified users: {e}")
        await bot.send_message(callback_query.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")


@dp.callback_query(F.data == "groups_stats")
async def groups_stats(callback_query: types.CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º"""
    await callback_query.answer("–°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    
    try:
        with DatabaseManager.get_connection() as conn:
            query = '''
                SELECT 
                    source_group,
                    COUNT(*) as total_users,
                    COUNT(DISTINCT user_id) as unique_users,
                    SUM(CASE WHEN is_premium = 1 THEN 1 ELSE 0 END) as premium_count,
                    SUM(CASE WHEN is_verified = 1 THEN 1 ELSE 0 END) as verified_count,
                    MAX(collected_at) as last_collection
                FROM users
                WHERE source_group IS NOT NULL AND source_group != ''
                GROUP BY source_group
                ORDER BY total_users DESC
                LIMIT 20
            '''
            import pandas as pd
            df = pd.read_sql_query(query, conn)
        
        if df.empty:
            await bot.send_message(callback_query.message.chat.id, "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥—Ä—É–ø–ø–∞–º")
            return
        
        result_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º (—Ç–æ–ø-{len(df)}):</b>\n\n"
        
        for i, (_, group) in enumerate(df.iterrows(), 1):
            group_name = group['source_group'][:40]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            result_text += f"{i}. <b>{group_name}</b>\n"
            result_text += f"   üë• –í—Å–µ–≥–æ: {group['total_users']} | –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {group['unique_users']}\n"
            
            if group['premium_count'] > 0:
                result_text += f"   üíé Premium: {group['premium_count']}"
            if group['verified_count'] > 0:
                result_text += f" | ‚úÖ Verified: {group['verified_count']}"
            
            result_text += "\n\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_groups = len(df)
        total_users = df['total_users'].sum()
        total_unique = df['unique_users'].sum()
        
        result_text += f"<b>–ò—Ç–æ–≥–æ:</b>\n"
        result_text += f"üìÅ –ì—Ä—É–ø–ø: {total_groups}\n"
        result_text += f"üë• –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_users}\n"
        result_text += f"üî¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_unique}"
        
        await bot.send_message(callback_query.message.chat.id, result_text, parse_mode="HTML")
    
    except Exception as e:
        logging.error(f"Error getting groups stats: {e}")
        await bot.send_message(callback_query.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


@dp.callback_query(F.data == "cancel_export")
async def cancel_export(callback_query: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    await callback_query.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    await bot.edit_message_text(
        text="‚ùå –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω",
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )

