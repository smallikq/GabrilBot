import logging
from aiogram import types, F
from pathlib import Path
from datetime import datetime

from ..utils.file_utils import get_file_management_stats, list_reply_files, cleanup_old_files
from ..keyboards.settings_menu import get_file_management_keyboard
from ..aiogram_loader import dp, bot


@dp.message(F.text == "üóÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏")
async def file_management(message: types.Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏"""
    try:
        stats = get_file_management_stats()
        
        if "error" in stats:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {stats['error']}")
            return

        management_text = f"üóÇ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏</b>\n\n"
        management_text += f"üìã <b>Reply —Ñ–∞–π–ª—ã:</b> {stats['reply_files']}\n"
        management_text += f"üíæ <b>–ë—ç–∫–∞–ø—ã:</b> {stats['backup_files']}\n"
        management_text += f"üìä <b>–≠–∫—Å–ø–æ—Ä—Ç—ã:</b> {stats['export_files']}\n\n"
        management_text += f"üíΩ <b>–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:</b> {stats['total_size_mb']:.1f} –ú–ë"

        await message.answer(management_text, reply_markup=get_file_management_keyboard(), parse_mode="HTML")

    except Exception as e:
        logging.error(f"Error in file management: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@dp.callback_query(F.data == "list_reply_files")
async def list_reply_files_callback(callback_query: types.CallbackQuery):
    """–°–ø–∏—Å–æ–∫ reply —Ñ–∞–π–ª–æ–≤"""
    await callback_query.answer()

    try:
        files_info = list_reply_files(limit=10)

        if not files_info:
            await bot.send_message(callback_query.message.chat.id, "üìã Reply —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        files_text = f"üìã <b>Reply —Ñ–∞–π–ª—ã ({len(files_info)}):</b>\n\n"

        for i, file_info in enumerate(files_info, 1):
            files_text += f"{i}. <code>{file_info['name']}</code>\n"
            files_text += f"   üìÖ {file_info['date'].strftime('%d.%m.%Y %H:%M')} | üíΩ {file_info['size_kb']:.1f} KB\n\n"

        await bot.send_message(callback_query.message.chat.id, files_text, parse_mode="HTML")

    except Exception as e:
        logging.error(f"Error listing reply files: {e}")
        await bot.send_message(callback_query.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")


@dp.callback_query(F.data == "cleanup_old_files")
async def cleanup_old_files_callback(callback_query: types.CallbackQuery):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    await callback_query.answer("–û—á–∏—â–∞—é —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã...")

    try:
        cleanup_result = cleanup_old_files(days_old=30)
        
        if "error" in cleanup_result:
            await bot.send_message(callback_query.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {cleanup_result['error']}")
            return

        cleanup_text = f"üóë <b>–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
        cleanup_text += f"üìÅ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {cleanup_result['deleted_count']}\n"
        cleanup_text += f"üíΩ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {cleanup_result['size_freed'] / (1024 * 1024):.1f} –ú–ë"

        await bot.send_message(callback_query.message.chat.id, cleanup_text, parse_mode="HTML")

    except Exception as e:
        logging.error(f"Error cleaning up files: {e}")
        await bot.send_message(callback_query.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")


@dp.callback_query(F.data == "list_backup_files")
async def list_backup_files_callback(callback_query: types.CallbackQuery):
    """–°–ø–∏—Å–æ–∫ backup —Ñ–∞–π–ª–æ–≤"""
    await callback_query.answer()

    try:
        backup_dir = Path('bot/data/backups')
        
        if not backup_dir.exists():
            await bot.send_message(callback_query.message.chat.id, "üì¶ Backup —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        backup_files = sorted(backup_dir.glob('*.db'), key=lambda x: x.stat().st_mtime, reverse=True)[:10]
        
        if not backup_files:
            await bot.send_message(callback_query.message.chat.id, "üì¶ Backup —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        files_text = f"üì¶ <b>Backup —Ñ–∞–π–ª—ã ({len(backup_files)}):</b>\n\n"

        for i, file_path in enumerate(backup_files, 1):
            stat = file_path.stat()
            size_mb = stat.st_size / (1024 * 1024)
            mod_time = datetime.fromtimestamp(stat.st_mtime)
            
            files_text += f"{i}. <code>{file_path.name}</code>\n"
            files_text += f"   üìÖ {mod_time.strftime('%d.%m.%Y %H:%M')} | üíΩ {size_mb:.2f} –ú–ë\n\n"

        await bot.send_message(callback_query.message.chat.id, files_text, parse_mode="HTML")

    except Exception as e:
        logging.error(f"Error listing backup files: {e}")
        await bot.send_message(callback_query.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")


@dp.callback_query(F.data == "create_archive")
async def create_archive_callback(callback_query: types.CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
    await callback_query.answer("–°–æ–∑–¥–∞—é –∞—Ä—Ö–∏–≤...")

    try:
        from aiogram.types import FSInputFile
        import zipfile
        from datetime import datetime
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        archive_path = f'bot/data/exports/archive_{timestamp}.zip'
        os.makedirs('bot/data/exports', exist_ok=True)

        status_msg = await bot.send_message(
            callback_query.message.chat.id,
            "üì¶ –°–æ–∑–¥–∞—é –∞—Ä—Ö–∏–≤ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö..."
        )

        with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db_path = 'bot/data/all_users.db'
            if os.path.exists(db_path):
                zipf.write(db_path, 'all_users.db')
            
            # –î–æ–±–∞–≤–ª—è–µ–º reply —Ñ–∞–π–ª—ã
            reply_dir = Path('bot/data/reply')
            if reply_dir.exists():
                for file in reply_dir.glob('*.txt'):
                    zipf.write(file, f'reply/{file.name}')
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç—ã
            exports_dir = Path('bot/data/exports')
            if exports_dir.exists():
                for file in list(exports_dir.glob('*.xlsx'))[:5]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
                    zipf.write(file, f'exports/{file.name}')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏
            logs_dir = Path('bot/data/logs')
            if logs_dir.exists():
                for file in logs_dir.glob('*.log'):
                    zipf.write(file, f'logs/{file.name}')

        archive_size = os.path.getsize(archive_path) / (1024 * 1024)

        await bot.edit_message_text(
            f"‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω ({archive_size:.1f} –ú–ë). –û—Ç–ø—Ä–∞–≤–ª—è—é...",
            callback_query.message.chat.id,
            status_msg.message_id
        )

        await bot.send_document(
            callback_query.message.chat.id,
            FSInputFile(archive_path, filename=f'archive_{timestamp}.zip'),
            caption=f"üì¶ –ü–æ–ª–Ω—ã–π –∞—Ä—Ö–∏–≤ –¥–∞–Ω–Ω—ã—Ö ({archive_size:.1f} –ú–ë)"
        )

        await bot.delete_message(callback_query.message.chat.id, status_msg.message_id)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤
        try:
            os.remove(archive_path)
        except:
            pass

    except Exception as e:
        logging.error(f"Error creating archive: {e}")
        await bot.send_message(callback_query.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: {e}")
