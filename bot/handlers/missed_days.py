import asyncio
import os
import logging
from datetime import datetime, timedelta
from aiogram import types, F
from aiogram.types import FSInputFile

from ..utils.file_utils import get_last_parsed_date
from ..utils.telegram_parser import get_users_from_chats_enhanced
from ..keyboards.settings_menu import get_missed_days_keyboard
from ..utils.database import DatabaseManager
from ..aiogram_loader import dp, bot, pending_missed_days, active_tasks


@dp.message(F.text == "üìå –ü–∞—Ä—Å–∏—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–Ω–∏")
async def process_missed_days(message: types.Message):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π"""
    status_msg = await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–Ω–∏...")

    try:
        last_date = get_last_parsed_date()
        today = datetime.now().date()

        if not last_date:
            await bot.edit_message_text(
                text="‚ö†Ô∏è –í –±–∞–∑–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø–∞—Ä—Å–∏–Ω–≥–µ.\n"
                     "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—ã—á–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö.",
                chat_id=message.chat.id,
                message_id=status_msg.message_id
            )
            return

        missed_days = []
        current = last_date + timedelta(days=1)
        while current < today:
            missed_days.append(current)
            current += timedelta(days=1)

        if not missed_days:
            await bot.edit_message_text(
                text="‚úÖ –ù–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω–∞.",
                chat_id=message.chat.id,
                message_id=status_msg.message_id
            )
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –Ω–µ–¥–µ–ª—è–º –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_days = missed_days[:15] if len(missed_days) > 15 else missed_days
        days_text = "\n".join([f"‚Ä¢ {d.strftime('%d.%m.%Y (%A)')}" for d in display_days])

        if len(missed_days) > 15:
            days_text += f"\n... –∏ –µ—â—ë {len(missed_days) - 15} –¥–Ω–µ–π"

        await bot.edit_message_text(
            text=f"üìå <b>–ù–∞–π–¥–µ–Ω–æ {len(missed_days)} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π</b>\n\n{days_text}\n\n"
                 f"‚è± <b>–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è:</b> ~{len(missed_days) * 2} –º–∏–Ω—É—Ç\n"
                 f"üîß <b>–†–µ–∂–∏–º:</b> –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n\n"
                 f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            chat_id=message.chat.id,
            message_id=status_msg.message_id,
            reply_markup=get_missed_days_keyboard(),
            parse_mode="HTML"
        )

        global pending_missed_days
        pending_missed_days = missed_days

    except Exception as e:
        logging.error(f"Error in process_missed_days: {e}")
        await bot.edit_message_text(
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π:\n{str(e)}",
            chat_id=message.chat.id,
            message_id=status_msg.message_id
        )


@dp.callback_query(F.data == "process_all_missed_enhanced")
async def handle_process_missed_enhanced(callback_query: types.CallbackQuery):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π"""
    await callback_query.answer()

    global pending_missed_days

    if not pending_missed_days:
        await bot.edit_message_text(
            text="‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω—è—Ö.",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id
        )
        return

    user_id = callback_query.message.chat.id
    if user_id in active_tasks:
        await bot.send_message(user_id, "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–¥–∞—á–∞.")
        return

    active_tasks[user_id] = True

    try:
        total_days = len(pending_missed_days)
        processed_count = 0
        errors_count = 0
        all_reply_files = []

        await bot.edit_message_text(
            text=f"üöÄ <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ {total_days} –¥–Ω–µ–π</b>\n"
                 f"üîß –†–µ–∂–∏–º: –£–º–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã + –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
                 f"‚è± –í—Ä–µ–º—è: –¥–æ {total_days * 2} –º–∏–Ω—É—Ç",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode="HTML"
        )

        for i, day in enumerate(pending_missed_days, 1):
            try:
                if i % 3 == 1 or i == total_days:
                    progress_text = f"üìÖ <b>–î–µ–Ω—å {i}/{total_days}:</b> {day.strftime('%d.%m.%Y')}\n"
                    progress_text += f"‚úÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–æ:</b> {processed_count}\n"
                    progress_text += f"‚ùå <b>–û—à–∏–±–æ–∫:</b> {errors_count}\n"
                    progress_text += f"üìÅ <b>–§–∞–π–ª–æ–≤:</b> {len(all_reply_files)}"

                    await bot.edit_message_text(
                        text=progress_text,
                        chat_id=callback_query.message.chat.id,
                        message_id=callback_query.message.message_id,
                        parse_mode="HTML"
                    )

                success, day_files = await start_processing_single_day_enhanced(callback_query.message, day)

                if success:
                    processed_count += 1
                    all_reply_files.extend(day_files)
                else:
                    errors_count += 1

                if i < total_days:
                    await asyncio.sleep(2)

            except Exception as e:
                logging.error(f"Error processing missed day {day}: {e}")
                errors_count += 1

        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        final_text = f"üéâ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        final_text += f"üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        final_text += f"‚Ä¢ –í—Å–µ–≥–æ –¥–Ω–µ–π: {total_days}\n"
        final_text += f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count}\n"
        final_text += f"‚Ä¢ –û—à–∏–±–æ–∫: {errors_count}\n"
        final_text += f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ reply —Ñ–∞–π–ª–æ–≤: {len(all_reply_files)}\n"
        final_text += f"‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {processed_count / total_days * 100:.1f}%"

        await bot.edit_message_text(
            text=final_text,
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode="HTML"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
        if all_reply_files:
            await callback_query.message.answer(f"üìã –û—Ç–ø—Ä–∞–≤–ª—è—é {len(all_reply_files)} —Ñ–∞–π–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")

            for file_path in all_reply_files:
                if os.path.exists(file_path):
                    try:
                        with open(file_path, 'rb') as file:
                            await bot.send_document(
                                callback_query.message.chat.id,
                                FSInputFile(file_path, filename=os.path.basename(file_path)),
                                caption=f"üìã {os.path.basename(file_path)}"
                            )
                    except Exception as e:
                        logging.error(f"Error sending missed day file: {e}")

        await send_enhanced_database(callback_query.message.chat.id, max(pending_missed_days))

    finally:
        active_tasks.pop(user_id, None)
        pending_missed_days = []


async def start_processing_single_day_enhanced(message, date_target) -> tuple[bool, list]:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –¥–Ω—è"""
    try:
        all_results = []
        all_files = []
        success = True

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        import os
        import sys
        sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
        from bot.data.parser_cfg import accounts

        for account in accounts:
            try:
                result, file_path = await get_users_from_chats_enhanced(account, date_target)
                all_results.extend(result)
                if file_path and os.path.exists(file_path):
                    all_files.append(file_path)

            except Exception as e:
                logging.error(f"Error processing account {account.get('phone_number')}: {e}")
                success = False

        return success, all_files

    except Exception as e:
        logging.error(f"Error in single day processing: {e}")
        return False, []


async def send_enhanced_database(chat_id: int, date_target: datetime.date):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π (—ç–∫—Å–ø–æ—Ä—Ç –∏–∑ SQL)"""
    try:
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQL –≤ Excel
        temp_file = DatabaseManager.export_to_excel()
        
        if temp_file and os.path.exists(temp_file):
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = DatabaseManager.get_database_stats()

            caption = f"üìö <b>–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            caption += f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0):,}\n"
            caption += f"üìÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞: {date_target.strftime('%d.%m.%Y')}\n"

            if stats.get('with_username', 0) > 0:
                caption += f"üè∑ –° username: {stats['with_username']:,}\n"
            
            if stats.get('premium_users', 0) > 0:
                caption += f"‚≠ê Premium: {stats['premium_users']:,}\n"

            await bot.send_document(
                chat_id,
                FSInputFile(temp_file, filename='all_users.xlsx'),
                caption=caption,
                parse_mode="HTML"
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            try:
                os.remove(temp_file)
            except:
                pass
        else:
            await bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            
    except Exception as e:
        logging.error(f"Error sending enhanced database: {e}")
        await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

