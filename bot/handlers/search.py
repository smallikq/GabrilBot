import os
import pandas as pd
import logging
from datetime import datetime
from aiogram import types, F
from aiogram.fsm.context import FSMContext

from ..states.form_states import Form
from ..keyboards.main_menu import get_enhanced_main_keyboard
from ..aiogram_loader import dp


@dp.message(F.text == "üîé –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def search_users(message: types.Message, state: FSMContext):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ"""
    await state.set_state(Form.waiting_for_user_ids)

    search_text = (
        "üîé <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n"
        "‚Ä¢ <code>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789)\n"
        "‚Ä¢ <code>@username</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä: @john_doe)\n"
        "‚Ä¢ <code>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω)\n"
        "‚Ä¢ <code>–ù–µ—Å–∫–æ–ª—å–∫–æ ID</code> —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"
    )
    
    from ..keyboards.settings_menu import get_cancel_keyboard
    await message.answer(search_text, reply_markup=get_cancel_keyboard(), parse_mode="HTML")


@dp.callback_query(F.data == "cancel_action")
async def cancel_search_action(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    from ..aiogram_loader import bot
    await callback_query.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()
    await bot.edit_message_text(
        text="‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )


@dp.message(Form.waiting_for_user_ids)
async def process_search_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        from ..utils.database import DatabaseManager
        
        search_term = message.text.strip()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –∏–∑ DatabaseManager
        results = DatabaseManager.search_users(search_term)

        if results.empty:
            await message.answer(f"üîé –ü–æ –∑–∞–ø—Ä–æ—Å—É '<code>{search_term}</code>' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", parse_mode="HTML")
        else:
            search_text = f"üîé <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:</b> {len(results)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"

            for i, (_, user) in enumerate(results.head(10).iterrows(), 1):
                search_text += f"{i}. <b>ID:</b> <code>{user['User_id']}</code>\n"
                if pd.notna(user.get('Username')):
                    search_text += f"   <b>Username:</b> {user['Username']}\n"
                if pd.notna(user.get('–ò–º—è')):
                    search_text += f"   <b>–ò–º—è:</b> {user['–ò–º—è']}\n"
                if pd.notna(user.get('–ò—Å—Ç–æ—á–Ω–∏–∫ –≥—Ä—É–ø–ø—ã')):
                    search_text += f"   <b>–ì—Ä—É–ø–ø–∞:</b> {user['–ò—Å—Ç–æ—á–Ω–∏–∫ –≥—Ä—É–ø–ø—ã']}\n"
                search_text += "\n"

            if len(results) > 10:
                search_text += f"... –∏ –µ—â—ë {len(results) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

            await message.answer(search_text, parse_mode="HTML")

        await state.clear()

    except Exception as e:
        logging.error(f"Search error: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        await state.clear()


@dp.message(F.text == "üìÖ –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç")
async def date_range_menu(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç"""
    await state.set_state(Form.waiting_for_date_range)

    range_text = (
        "üìÖ <b>–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ <code>01.09.2024 - 05.09.2024</code>\n"
        "‚Ä¢ <code>15.08.2024 - 20.08.2024</code>\n\n"
        "‚ö†Ô∏è –ë–æ–ª—å—à–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –º–æ–≥—É—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"
    )
    
    from ..keyboards.settings_menu import get_cancel_keyboard
    await message.answer(range_text, reply_markup=get_cancel_keyboard(), parse_mode="HTML")


@dp.message(Form.waiting_for_date_range)
async def process_date_range(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç"""
    try:
        date_range = message.text.strip()

        # –ü–∞—Ä—Å–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
        if ' - ' in date_range:
            start_str, end_str = date_range.split(' - ')
            start_date = datetime.strptime(start_str.strip(), "%d.%m.%Y").date()
            end_date = datetime.strptime(end_str.strip(), "%d.%m.%Y").date()
        else:
            await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì")
            return

        if start_date > end_date:
            await message.reply("‚ö†Ô∏è –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π")
            return

        if end_date > datetime.now().date():
            await message.reply("‚ö†Ô∏è –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
            return

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        delta = end_date - start_date
        days_count = delta.days + 1

        if days_count > 30:
            await message.reply("‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 30 –¥–Ω–µ–π. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—å—à–∏–π –ø–µ—Ä–∏–æ–¥.")
            return

        await state.clear()

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm_text = f"üìÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞</b>\n\n"
        confirm_text += f"üìä –ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n"
        confirm_text += f"üìÜ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: {days_count}\n"
        confirm_text += f"‚è± –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: ~{days_count * 3} –º–∏–Ω—É—Ç\n\n"
        confirm_text += f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"

        from ..keyboards.settings_menu import get_date_range_confirmation_keyboard
        keyboard = get_date_range_confirmation_keyboard(start_date, end_date)

        await message.answer(confirm_text, reply_markup=keyboard, parse_mode="HTML")

    except ValueError:
        await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@dp.callback_query(F.data.startswith("process_range_"))
async def handle_process_range(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç"""
    await callback_query.answer()
    
    try:
        from ..aiogram_loader import bot, active_tasks
        import asyncio
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—ã –∏–∑ callback_data
        parts = callback_query.data.split('_')
        start_date = datetime.strptime(parts[2], "%Y-%m-%d").date()
        end_date = datetime.strptime(parts[3], "%Y-%m-%d").date()
        
        user_id = callback_query.message.chat.id
        if user_id in active_tasks:
            await bot.send_message(user_id, "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–¥–∞—á–∞.")
            return
        
        active_tasks[user_id] = True
        
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
            delta = end_date - start_date
            days_count = delta.days + 1
            
            await bot.edit_message_text(
                text=f"üöÄ <b>–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É {days_count} –¥–Ω–µ–π</b>\n"
                     f"üìä –ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}",
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                parse_mode="HTML"
            )
            
            processed_count = 0
            errors_count = 0
            all_files = []
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
            import sys
            sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
            from bot.data.parser_cfg import accounts
            from bot.utils.telegram_parser import get_users_from_chats_enhanced
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
            current_date = start_date
            while current_date <= end_date:
                try:
                    progress_text = f"üìÖ <b>–î–µ–Ω—å {processed_count + 1}/{days_count}</b>\n"
                    progress_text += f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {current_date.strftime('%d.%m.%Y')}\n"
                    progress_text += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {processed_count}\n"
                    progress_text += f"‚ùå –û—à–∏–±–æ–∫: {errors_count}"
                    
                    if (processed_count + 1) % 3 == 1 or current_date == end_date:
                        await bot.edit_message_text(
                            text=progress_text,
                            chat_id=callback_query.message.chat.id,
                            message_id=callback_query.message.message_id,
                            parse_mode="HTML"
                        )
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                    for account in accounts:
                        try:
                            result, file_path = await get_users_from_chats_enhanced(account, current_date)
                            if file_path and os.path.exists(file_path):
                                all_files.append(file_path)
                        except Exception as e:
                            logging.error(f"Error processing account {account.get('phone_number')} for {current_date}: {e}")
                    
                    processed_count += 1
                    current_date += pd.Timedelta(days=1)
                    
                    if current_date <= end_date:
                        await asyncio.sleep(2)
                    
                except Exception as e:
                    logging.error(f"Error processing date {current_date}: {e}")
                    errors_count += 1
                    current_date += pd.Timedelta(days=1)
            
            # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Ñ–∞–π–ª –∑–∞ –≤–µ—Å—å –¥–∏–∞–ø–∞–∑–æ–Ω
            combined_file = None
            if all_files:
                try:
                    # –ß–∏—Ç–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    all_dataframes = []
                    for file_path in all_files:
                        if os.path.exists(file_path):
                            df = pd.read_excel(file_path)
                            all_dataframes.append(df)

                    if all_dataframes:
                        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ DataFrame
                        combined_df = pd.concat(all_dataframes, ignore_index=True)

                        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ User_id (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ)
                        combined_df = combined_df.drop_duplicates(subset=['User_id'], keep='last')

                        # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Ñ–∞–π–ª
                        date_range_str = f"{start_date.strftime('%Y-%m-%d')}_to_{end_date.strftime('%Y-%m-%d')}"
                        combined_file = f'bot/data/exports/range_{date_range_str}.xlsx'

                        os.makedirs('bot/data/exports', exist_ok=True)
                        combined_df.to_excel(combined_file, index=False)

                        logging.info(f"Combined file created: {combined_file} with {len(combined_df)} unique users")

                except Exception as e:
                    logging.error(f"Error creating combined file: {e}")

            # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            final_text = f"üéâ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            final_text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            final_text += f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–Ω–µ–π: {processed_count}/{days_count}\n"
            final_text += f"‚Ä¢ –û—à–∏–±–æ–∫: {errors_count}\n"
            final_text += f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(all_files)}\n"
            final_text += f"‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {processed_count / days_count * 100:.1f}%"

            await bot.edit_message_text(
                text=final_text,
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                parse_mode="HTML"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Ñ–∞–π–ª –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω
            if combined_file and os.path.exists(combined_file):
                from aiogram.types import FSInputFile
                try:
                    combined_df_stats = pd.read_excel(combined_file)
                    caption = f"üìã <b>–û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Ñ–∞–π–ª –∑–∞ –ø–µ—Ä–∏–æ–¥</b>\n\n"
                    caption += f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n"
                    caption += f"üìä –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(combined_df_stats):,}\n"
                    caption += f"üìÅ –î–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count}"

                    await bot.send_document(
                        callback_query.message.chat.id,
                        FSInputFile(combined_file, filename=f'range_{start_date.strftime("%d.%m.%Y")}-{end_date.strftime("%d.%m.%Y")}.xlsx'),
                        caption=caption,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logging.error(f"Error sending combined file: {e}")
                    await bot.send_message(callback_query.message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            from bot.handlers.parser import send_enhanced_database
            await send_enhanced_database(callback_query.message.chat.id, end_date)
            
        finally:
            active_tasks.pop(user_id, None)
    
    except Exception as e:
        logging.error(f"Error in process_range: {e}")
        await bot.send_message(callback_query.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")


@dp.callback_query(F.data == "cancel_range")
async def cancel_range(callback_query: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
    from ..aiogram_loader import bot
    await callback_query.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    await bot.edit_message_text(
        text="‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )


@dp.callback_query(F.data == "cancel_missed")
async def cancel_missed(callback_query: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π"""
    from ..aiogram_loader import bot, pending_missed_days
    
    pending_missed_days.clear()
    await callback_query.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    await bot.edit_message_text(
        text="‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π –æ—Ç–º–µ–Ω–µ–Ω–∞",
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )

