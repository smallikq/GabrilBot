from aiogram import types, F
from aiogram.fsm.context import FSMContext
from datetime import datetime

from ..keyboards.date_selection import get_enhanced_date_keyboard
from ..aiogram_loader import dp
from ..states.form_states import Form


@dp.message(F.text == "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
async def process_start_command(message: types.Message):
    """–ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    await message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:", reply_markup=get_enhanced_date_keyboard())


@dp.callback_query(F.data.startswith('date_'))
async def process_date_selection(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    await callback_query.answer()
    date_str = callback_query.data.split('_')[1]
    try:
        date_obj = datetime.strptime(date_str, "%d.%m.%Y").date()
        await start_processing_enhanced(callback_query.message, date_obj)
    except ValueError:
        from ..aiogram_loader import bot
        await bot.send_message(callback_query.message.chat.id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.")


@dp.callback_query(F.data == 'custom_date')
async def process_custom_date(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π –¥–∞—Ç—ã"""
    await callback_query.answer()
    await state.set_state(Form.waiting_for_date)
    from ..aiogram_loader import bot
    await bot.send_message(
        callback_query.message.chat.id,
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.01.2024):"
    )


@dp.message(Form.waiting_for_date)
async def process_custom_date_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π –¥–∞—Ç—ã"""
    try:
        date_obj = datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
        if date_obj > datetime.now().date():
            await message.reply("‚ö†Ô∏è –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.")
            return
        await state.clear()
        await start_processing_enhanced(message, date_obj)
    except ValueError:
        await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")


async def start_processing_enhanced(message, date_target):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    from ..aiogram_loader import bot, active_tasks
    user_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
    if user_id in active_tasks:
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–¥–∞—á–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return

    active_tasks[user_id] = True

    try:
        status_message = await message.answer(
            f"üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ {date_target.strftime('%d.%m.%Y')}...\n"
            f"üìä –í–∫–ª—é—á–µ–Ω—ã —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"
        )

        all_results = []
        all_files = []
        processed_accounts = 0
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        import sys
        import os
        sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
        from bot.data.parser_cfg import accounts
        total_accounts = len(accounts)

        from ..utils.telegram_parser import get_users_from_chats_enhanced

        for i, account in enumerate(accounts, 1):
            try:
                await bot.edit_message_text(
                    text=f"üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {i}/{total_accounts}: {account['phone_number']}\n"
                         f"üìä –ü—Ä–∏–º–µ–Ω—è—é —É–º–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã...",
                    chat_id=message.chat.id,
                    message_id=status_message.message_id
                )

                result, file_path = await get_users_from_chats_enhanced(account, date_target)
                all_results.extend(result)
                if file_path:
                    all_files.append(file_path)
                processed_accounts += 1

            except Exception as e:
                import logging
                logging.error(f"Error processing account {account.get('phone_number')}: {e}")
                all_results.append(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç–µ {account.get('phone_number')}: {str(e)}")

        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        await bot.edit_message_text(
            text=f"‚úÖ –°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_accounts}/{total_accounts}\n"
                 f"üìä –°–æ–∑–¥–∞—é –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...",
            chat_id=message.chat.id,
            message_id=status_message.message_id
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        success_count = len([r for r in all_results if "new users added" in r])
        error_count = len([r for r in all_results if "‚ùå" in r])

        summary = f"üéâ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        summary += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        summary += f"‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_accounts}/{total_accounts}\n"
        summary += f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {success_count}\n"
        summary += f"‚Ä¢ –û—à–∏–±–æ–∫: {error_count}\n"
        summary += f"‚Ä¢ –§–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(all_files)}\n"

        await bot.edit_message_text(
            text=summary,
            chat_id=message.chat.id,
            message_id=status_message.message_id,
            parse_mode="HTML"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
        from aiogram.types import FSInputFile
        for file_path in all_files:
            if os.path.exists(file_path):
                try:
                    with open(file_path, 'rb') as file:
                        await bot.send_document(
                            message.chat.id,
                            FSInputFile(file_path, filename=os.path.basename(file_path)),
                            caption=f"üìã {os.path.basename(file_path)}"
                        )
                except Exception as e:
                    import logging
                    logging.error(f"Error sending file: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –±–∞–∑—É —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
        await send_enhanced_database(message.chat.id, date_target)

    finally:
        active_tasks.pop(user_id, None)


async def send_enhanced_database(chat_id: int, date_target: datetime.date):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π (—ç–∫—Å–ø–æ—Ä—Ç –∏–∑ SQL)"""
    from ..aiogram_loader import bot
    from ..utils.database import DatabaseManager
    from aiogram.types import FSInputFile
    import logging
    
    try:
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQL –≤ Excel
        temp_file = DatabaseManager.export_to_excel()
        
        if temp_file and os.path.exists(temp_file):
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = DatabaseManager.get_database_stats()

            caption = f"üìö <b>–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            caption += f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0):,}\n"
            caption += f"üìÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞: {date_target.strftime('%d.%m.%Y')}\n"

            if stats.get('with_username', 0) > 0:
                caption += f"üè∑ –° username: {stats['with_username']:,}\n"
            
            if stats.get('premium_users', 0) > 0:
                caption += f"‚≠ê Premium: {stats['premium_users']:,}\n"

            await bot.send_document(
                chat_id,
                FSInputFile(temp_file, filename='all_users.xlsx'),
                caption=caption,
                parse_mode="HTML"
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            try:
                os.remove(temp_file)
            except:
                pass
        else:
            await bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            
    except Exception as e:
        logging.error(f"Error sending enhanced database: {e}")
        await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

