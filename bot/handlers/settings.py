from aiogram import types, F

from ..keyboards.settings_menu import get_settings_keyboard
from ..aiogram_loader import dp, user_settings, get_bot


def get_settings_text(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    settings = user_settings.get(user_id, {})
    
    settings_text = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
    settings_text += f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ' if settings.get('notifications', True) else '‚ùå'}\n"
    settings_text += f"üíæ –ê–≤—Ç–æ–±—ç–∫–∞–ø—ã: {'‚úÖ' if settings.get('auto_backup', True) else '‚ùå'}\n"
    settings_text += f"üìä –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞: {settings.get('export_format', 'excel').upper()}\n"
    
    return settings_text


@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    settings = user_settings.get(user_id, {})
    
    settings_text = get_settings_text(user_id)
    await message.answer(settings_text, reply_markup=get_settings_keyboard(settings), parse_mode="HTML")


@dp.callback_query(F.data == "toggle_notifications")
async def toggle_notifications(callback_query: types.CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = callback_query.from_user.id
    current = user_settings.get(user_id, {}).get('notifications', True)

    if user_id not in user_settings:
        user_settings[user_id] = {}
    user_settings[user_id]['notifications'] = not current

    status = "–≤–∫–ª—é—á–µ–Ω—ã" if not current else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    await callback_query.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot = get_bot()
    settings = user_settings.get(user_id, {})
    settings_text = get_settings_text(user_id)
    await bot.edit_message_text(
        text=settings_text,
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=get_settings_keyboard(settings),
        parse_mode="HTML"
    )


@dp.callback_query(F.data == "toggle_backup")
async def toggle_backup(callback_query: types.CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–±—ç–∫–∞–ø–æ–≤"""
    user_id = callback_query.from_user.id
    current = user_settings.get(user_id, {}).get('auto_backup', True)

    if user_id not in user_settings:
        user_settings[user_id] = {}
    user_settings[user_id]['auto_backup'] = not current

    status = "–≤–∫–ª—é—á–µ–Ω—ã" if not current else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    await callback_query.answer(f"–ê–≤—Ç–æ–±—ç–∫–∞–ø—ã {status}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot = get_bot()
    settings = user_settings.get(user_id, {})
    settings_text = get_settings_text(user_id)
    await bot.edit_message_text(
        text=settings_text,
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=get_settings_keyboard(settings),
        parse_mode="HTML"
    )


@dp.callback_query(F.data == "change_export_format")
async def change_export_format(callback_query: types.CallbackQuery):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    from ..keyboards.settings_menu import get_export_format_keyboard

    bot = get_bot()
    await callback_query.answer()
    await bot.send_message(
        callback_query.message.chat.id,
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:",
        reply_markup=get_export_format_keyboard()
    )


@dp.callback_query(F.data.startswith("set_format_"))
async def set_export_format(callback_query: types.CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    user_id = callback_query.from_user.id
    format_type = callback_query.data.split("_")[-1]
    
    if user_id not in user_settings:
        user_settings[user_id] = {}
    user_settings[user_id]['export_format'] = format_type
    
    await callback_query.answer(f"–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞: {format_type.upper()}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    bot = get_bot()
    settings = user_settings.get(user_id, {})
    settings_text = get_settings_text(user_id)
    await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text=settings_text,
        reply_markup=get_settings_keyboard(settings),
        parse_mode="HTML"
    )


@dp.callback_query(F.data == "reset_settings")
async def reset_settings(callback_query: types.CallbackQuery):
    """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user_id = callback_query.from_user.id
    
    user_settings[user_id] = {
        'notifications': True,
        'auto_backup': True,
        'export_format': 'excel'
    }
    
    await callback_query.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot = get_bot()
    settings = user_settings.get(user_id, {})
    settings_text = get_settings_text(user_id)
    await bot.edit_message_text(
        text=settings_text,
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=get_settings_keyboard(settings),
        parse_mode="HTML"
    )
